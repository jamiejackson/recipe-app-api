services:
  app:
    build:
      context: .
      args:
        DEV: "true"
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
    command:
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    environment:
      DB_HOST: db
      DB_NAME: ${POSTGRES_DB:?POSTGRES_DB is required}
      DB_USER: ${POSTGRES_USER:?POSTGRES_USER is required}
      DB_PASS: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
    depends_on:
      - db

  db:
    image: postgres:13-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB:?POSTGRES_DB is required}
      POSTGRES_USER: ${POSTGRES_USER:?POSTGRES_USER is required}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: pass
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
      PGADMIN_SERVER_JSON_FILE: /tmp/servers.json
    volumes:
      - ./pgadmin/generate_pgadmin_servers.py:/tmp/generate_pgadmin_servers.py
    depends_on:
      - db
    entrypoint: >
      sh -c "python3 /tmp/generate_pgadmin_servers.py && /entrypoint.sh"

volumes:
  dev-db-data:
